apply plugin: "java-library"

jar {
    enabled = true
}

dependencies {
    /*******************************
     * API Dependencies
     *******************************/

    /*******************************
     * Compile Only Dependencies
     *******************************/

    compileOnly("com.google.code.findbugs:annotations")
    compileOnly("org.apache.hbase:hbase-annotations")

    /*******************************
     * Implementation Dependencies
     *******************************/

    implementation(project(':pxf-api'))
    implementation(project(':pxf-hbase-lib'))
    implementation("com.google.protobuf:protobuf-java")
    implementation("commons-collections:commons-collections")
    implementation("org.apache.hbase:hbase-client")                  { transitive = false }
    implementation("org.apache.hbase:hbase-common")                  { transitive = false }
    implementation("org.apache.hbase:hbase-protocol")                { transitive = false }
    implementation("org.apache.hbase:hbase-protocol-shaded")         { transitive = false }
    implementation("org.apache.hbase:hbase-zookeeper")               { transitive = false }
    implementation('org.apache.zookeeper:zookeeper-jute')            { transitive = false }
    implementation("org.apache.hbase.thirdparty:hbase-unsafe")       { transitive = false }
    implementation("org.apache.hbase.thirdparty:hbase-shaded-protobuf") { transitive = false }
    implementation("org.apache.hbase.thirdparty:hbase-shaded-miscellaneous") { transitive = false }
    implementation("org.apache.hbase.thirdparty:hbase-shaded-netty") { transitive = false }
    implementation("org.apache.hbase.thirdparty:hbase-shaded-gson") { transitive = false }
    implementation("org.apache.htrace:htrace-core")                  { transitive = false }
    implementation("org.apache.zookeeper:zookeeper")                 { transitive = false }
    implementation("io.netty:netty-common")                          { transitive = false }
    implementation("io.netty:netty-transport")                       { transitive = false }
    implementation("com.yammer.metrics:metrics-core")                { transitive = false }
    implementation("org.apache.yetus:audience-annotations")          { transitive = false }
    implementation("io.opentelemetry:opentelemetry-api")             { transitive = false }
    implementation("io.opentelemetry:opentelemetry-context")         { transitive = false }
    implementation("io.opentelemetry:opentelemetry-semconv")         { transitive = false }
    implementation("io.dropwizard.metrics:metrics-core")             { transitive = false }

    implementation("org.springframework.boot:spring-boot-starter-log4j2")

    /*******************************
     * Test Dependencies
     *******************************/

    testCompileOnly("com.google.code.findbugs:annotations")
    testCompileOnly("org.apache.hbase:hbase-annotations")
    testImplementation("com.esotericsoftware:minlog")
    testImplementation("com.esotericsoftware:reflectasm")
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    // https://projectlombok.org
    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
}

test {
    useJUnitPlatform()
}